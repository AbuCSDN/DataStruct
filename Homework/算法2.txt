6.编写函数，要求逆置单链表（不带头结点）.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* reverseList(struct ListNode
* head)
{
    struct ListNode *pHead = NULL;
    struct ListNode *pNode = head;
    struct ListNode *pPrev = NULL;
    while(pNode != NULL)
    {
        struct ListNode* pNext = pNode->next
;
        if(pNext == NULL)
            pHead = pNode;
        pNode->next = pPrev;
        pPrev = pNode;
        pNode = pNext;
    }
    return pHead;
}

7.有一个数组 a , 编写函数，求数组中前K个最小的数字

8.编写函数: 求数组中元素出现次数超过数组长度一半的数字。如： {1,2,3,2,2,2,5,4,2} 数字 2 为超过数组长度一
半的数字。
bool g_bInputInvalid = false;//全局变量
bool CheckInvalidArray(int *numbers,int length)  
//检查是否为无效数据
{
    g_bInputInvalid = false;
    if(numbers == NULL || length <= 0)
        g_bInputInvalid = true;
    return g_bInputInvalid;
}
bool CheckMoreThanHalf(int *numbers,int length,int number) 
//检查出现次数最多的那个数字是否大于1/2数组长度
{
    int times = 0;
    for(int i=0;i<length;++i)
    {
        if(numbers[i] == number)
            times++;
    }
    bool isMoreThanHalf = true;
    if(times * 2 <= length)
    {
        g_bInputInvalid =true;
        isMoreThanHalf = false;
    }
    return isMoreThanHalf;
}

int majorityElement(int* nums, int numsSize)
{
    if(CheckInvalidArray(nums,numsSize))
        return 0;
    int result = nums[0];
    int times = 1;
    for(int i=1;i<numsSize;++i)
    {
        if(times == 0)
        {
            result = nums[i];
            times = 1;
        }
        else if(nums[i] == result)
            times++;
        else
            times--;
    }
    if(!CheckMoreThanHalf(nums,numsSize,result))
        result = 0;
    return result;
}

9.输入一个整型数组，数组里有正数也有负数。数组中一个或连续的多个整数组成一个子数组。求所有子数组的和的
最大值。要求时间复杂度为O(n)。例如输入的数组为{1,-2,3,10,-4,7,2,-5}，和最大的子数组为{3,10,-4,7,2}，因此输
出为该子数组的和18
bool g_InvalidInput = false;
int maxSubArray(int* nums, int numsSize)
{
    if(nums == 0 || numsSize <= 0)
    {
        g_InvalidInput = true;
        return 0;
    }
    g_InvalidInput = false;
int nSum = 0;
    int nMaxSum = 0x80000000;
    for(int i=0;i<numsSize;++i)
    {
        if(nSum <= 0)
            nSum = nums[i];
        else
            nSum += nums[i];
        if(nSum > nMaxSum)
            nMaxSum = nSum;
    }
    return nMaxSum;
}

10.在字符串中找出第一个只出现一次的字符。如输入 "abaccdeff" ，则输出 'b' 。要求时间复杂度为 O(n) 。
 
