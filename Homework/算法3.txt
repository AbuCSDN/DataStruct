11.对于一个字符串，请设计一个高效算法，找到第一次重复出现的字符。测试样例： "qywyer23tdd" , 返回： y

char findFirstRepeat(char * c,int n) 
{
 char word[11];
 int i, j;
 word[0] = *c;//把q赋给word[0] 
 for (i = 1; i<n; i++)
 for (j = 0; j<i; j++){
  if (*(c + i) == word[j]){
   printf("we have found the repeat word:%c", *(c + i));
   return 1;
  }
  else word[i] = *(c + i);
 }
}

12.一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。例如数组
为{1，3，5，7，1，3，5，9}，找出7和9。

unsigned int FindFirstBitIs1(int num);
bool IsBit1(int num, unsigned int indexBit);
void FindNumsAppearOnce(int data[], int length, int *num1, int *num2)
{
 if (data == NULL || length < 2)
 {
  return;
 }
 int resultExclusiveOR = 0;
 for (int i = 0; i < length; ++i)
 {
  resultExclusiveOR ^= data[i];
 }
 unsigned int indexOf1 = FindFirstBitIs1(resultExclusiveOR);
 *num1 = *num2 = 0;
 for (int j = 0; j < length; ++j)
 {
  if (IsBit1(data[j], indexOf1))
   *num1 ^= data[j];
  else
   *num2 ^= data[j];
 }
}

//找到num从右边数起第一个是1的位
unsigned int FindFirstBitIs1(int num)
{
 int indexBit = 0;
 while (((num & 1) == 0) && (indexBit < 8 * sizeof(int)))
 {
  num = num >> 1;
  ++indexBit;
 }
 return indexBit;
}

//判断num的第indexBit位是不是1
bool IsBit1(int num, unsigned int indexBit)
{
 num = num >> indexBit;
 return(num & 1);
}

13.输入两个字符串，从第一字符串中删除第二个字符串中所有的字符。例如，输入 ”They are students.” 和 ”aeiou” ，则删除之后的第一个字符串变成 ”Thy r stdnts.”

void Delete(char *a, char *b, int len1, int len2)
{
 int i = 0;
 int j = 0;
 int tmp = 0;
 char *p = a;
 for (i = 0; i < len2; ++i)
 {
  tmp = b[i];
  for (j = 0; j < len1&&a[j] != '\0'; ++j)
  {
   if (tmp == a[j])
   {
    int f = j;
    for (f; f < len1 && a[f] != '\0'; ++j)
    {
     a[f] = a[f + 1];
    }
   }
  }
  printf("%s\n", p);
 }
}

14.编写一个函数，求一个数字是否是回文数。回文数概念：给定一个数，这个数顺读和逆读都是一样的。例如：
121，1221是回文数，123，1231不是回文数。

int Is_Palind(int num)
{
 if (num < 0)
 {
  return 0;
 }
 int len = 1;
 while (num / len >= 10)
 {
  len *= 10;
 }
 while (num > 0)
 {
  //获取首尾元素
  int left = num / len;
  int right = num % 10;
  if (left != right)
  {
   return 0;
  }
  else
  {
   //首尾元素相等，删除首尾
   num = (num%len) / 10;
   len /= 100;
  }
 }
 return 1;
}

15.如何快速查找到一个单链表的中间位置？编写函数实现

struct ListNode* middleNode(struct ListNode* head)
{
 if (head == NULL)
  return NULL;
 struct ListNode *fast, *slow;//快慢指针
 fast = slow = head;
 while (fast && fast->next != NULL)
 {
  fast = fast->next->next;
  slow = slow->next;
 }
 return slow;
}