Lesson 3 顺序表和链表
1、https://leetcode-cn.com/problems/remove-linked-list-elements/description/ [删除链表中等于给定值 val 的所有节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* removeElements(struct ListNode* head, int val)
{
    if(head == NULL)
        return NULL;
    struct ListNode *p = head;
    struct ListNode *prev = NULL;
    while(p != NULL)
    {
        if(p->val == val)
        {
            struct ListNode *next = p->next;
            if(prev == NULL)
                head = head->next;
            else
                prev->next = p->next;
            free(p);
            p = next;
        }
        else
        {
            prev = p;
            p = p->next;
        }
    }
    return head;
}
2、https://leetcode-cn.com/problems/reverse-linked-list/description/  [反转一个单链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* reverseList(struct ListNode* head)
{
    if(head==NULL || head->next==NULL)
        return head;
    struct ListNode *p = head;
    struct ListNode *q = p->next;
    p->next = NULL;
    while(q != NULL)
    {
        p = q;
        q = q->next;
        p->next = head;
        head = p;
    }
    return head;
}
3、https://leetcode-cn.com/problems/middle-of-the-linked-list/description/  [链表的中间结点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* middleNode(struct ListNode* head)
{
    if(head == NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}
/*
struct ListNode* middleNode(struct ListNode* head)
{
    int len = 0;
    struct ListNode *p = head;
    while(p != NULL)
    {
        len++;
        p = p->next;
    }
    p = head;
    len /= 2;
    while(len-- > 0)
        p = p->next;
    return p;
}
*/
4、https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&&tqId=11167&rp=2&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [输出该链表中倒数第k个结点]
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) 
    {
        if(pListHead == NULL)
            return NULL;
        ListNode *fast, *slow;
        fast = slow = pListHead;
        while(k-- > 0)
        {
            if(fast == NULL)
                return NULL;
            fast = fast->next;
        }
        
        while(fast != NULL)
        {
            fast = fast->next;
            slow = slow->next;
        }
        return slow;
    }
};

5、https://leetcode-cn.com/problems/merge-two-sorted-lists/description/ [合并两个有序链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        if(l1 == NULL)
            return l2;
        else if(l2 == NULL)
            return l1;    

        struct ListNode *head;
        if(l1->val <= l2->val)
        {
            head = l1;
            l1 = l1->next;
        }
        else
        {
            head = l2;
            l2 = l2->next;
        }

        struct ListNode *tail = head;
        while(l1!=NULL && l2!=NULL)
        {
            if(l1->val <= l2->val)
            {
                tail->next = l1;
                l1 = l1->next;
            }
            else
            {
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        if(l1 != NULL)
            tail->next= l1;
        if(l2 != NULL)
            tail->next = l2;
        return head;
    }
};

6、https://www.nowcoder.com/practice/0e27e0b064de4eacac178676ef9c9d70?tpId=8&&tqId=11004&rp=2&ru=/activity/oj&qru=/ta/cracking-the-coding-interview/question-ranking [链表分割]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class Partition {
public:
    ListNode* partition(ListNode* pHead, int x) {
        // write code here
        if(pHead == NULL)
            return NULL;
        ListNode *pLessHead, *pLessTail;
        ListNode *pGreatHead, *pGreatTail;
        pLessHead = pLessTail = (ListNode*)malloc(sizeof(ListNode));
        pGreatHead = pGreatHead = (ListNode*)malloc(sizeof(ListNode));

        while(pHead != NULL)
        {
            if(pHead->val < x)
            {
                pLessTail->next = pHead;
                pLessTail = pHead;
            }
            else
            {
                pGreatTail->next = pHead;
                pGreatTail = pHead;
            }
            pHead = pHead->next;
        }

        pLessTail->next = pGreatHead->next;
        pGreatTail->next = NULL;
        pHead = pLessHead->next;

        free(pLessHead);
        free(pGreatHead);

        return pHead;
    }
};

7、https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&&tqId=11209&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [删除链表中的重复节点]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
        if(pHead == NULL)
            return NULL;
        ListNode *pre = NULL;
        ListNode *cur = pHead;
        ListNode *next_node = cur->next;

        while(next_node != NULL)
        {
            if(cur->val != next_node->val)
            {
                pre = cur;
                cur = next_node;
                next_node = next_node->next;
            }
            else
            {
                while(next_node!=NULL && next_node->val==cur->val)
                    next_node = next_node->next;
                if(pre == NULL)
                    pHead = next_node;
                else
                    pre->next = next_node;

                while(cur != next_node)
                {
                    ListNode *p = cur;
                    cur = cur->next;
                    free(p);
                }

                if(next_node != NULL)
                    next_node = next_node->next;
            }
        }

        return pHead;
    }
};

8、https://www.nowcoder.com/practice/d281619e4b3e4a60a2cc66ea32855bfa?tpId=49&&tqId=29370&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking [链表的回文结构]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class PalindromeList {
public:
    bool chkPalindrome(ListNode* A) 
    {
        // write code here
        if(A==NULL || A->next==NULL)
            return true;
        int ar[900] = {0};
        ListNode *p = A;
        int i = 0;
        while(p != NULL)
        {
            ar[i++] = p->val;
            p = p->next;
        }

        int start = 0;
        int end = i-1;
        while(start < end)
        {
            if(ar[start] != ar[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
};


9、https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/ [相交链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int GetListLen(ListNode *head)
    {
        int len = 0;
        while(head != NULL)
        {
            len++;
            head = head->next;
        }
        return len;
    }

    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lenA = GetListLen(headA);
        int lenB = GetListLen(headB);
        if(lenA==0 || lenB==0)
            return NULL;

        ListNode *longHead, *shortHead;
        int step = 0;
        if(lenA > lenB)
        {
            longHead = headA;
            shortHead = headB;
            step = lenA - lenB;
        }
        else
        {
            longHead = headB;
            shortHead = headA;
            step = lenB - lenA;
        }

        while(step-- != 0)
            longHead = longHead->next;

        while(shortHead!=NULL && longHead!=NULL)
        {
            if(shortHead == longHead)
                return shortHead;
            shortHead = shortHead->next;
            longHead = longHead->next;            
        }
        return NULL;
    }
};


10、https://leetcode-cn.com/problems/linked-list-cycle/description/ [环形链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) {
    if(head == NULL)
        return false;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast!=NULL && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow)
            return true;
    }
    return false;
}

11、https://leetcode-cn.com/problems/linked-list-cycle-ii/submissions/ [求环形链表的入口节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *detectCycle(struct ListNode *head) {
    if(head == NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast!=NULL && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow)
            break;
    }
    if(fast==NULL || fast->next==NULL)
        return NULL;

    fast = head;
    while(fast != slow)
    {
        fast = fast->next;
        slow = slow->next;
    }
    return fast;
}